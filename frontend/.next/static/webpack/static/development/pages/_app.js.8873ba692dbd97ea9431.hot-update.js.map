{"version":3,"file":"static/webpack/static/development/pages/_app.js.8873ba692dbd97ea9431.hot-update.js","sources":["webpack:///./components/RemoveFromCart.js","webpack:///./components/TakeMyMoney.js","webpack:///./components/User.js"],"sourcesContent":["import React from 'react';\nimport { Mutation } from 'react-apollo';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport gql from 'graphql-tag';\nimport { CURRENT_USER_QUERY } from './User';\n\nconst REMOVE_FROM_CART_MUTATION = gql`\n  mutation removeFromCart($id: ID!) {\n    removeFromCart(id: $id) {\n      id\n    }\n  }\n`;\n\nconst BigButton = styled.button`\n  font-size: 3rem;\n  color: ${props => props.theme.black};\n  background: none;\n  border: 0;\n  &:hover {\n    color: ${props => props.theme.red};\n    cursor: pointer;\n  }\n`;\n\nclass RemoveFromCart extends React.Component {\n  static propTypes = {\n    id: PropTypes.string.isRequired,\n  };\n\n  // This gets called as soon as we get a response back from the server after a mutation has been called\n  update = (cache, payload) => {\n    // 1. Read the cache\n    const data = cache.readQuery({ query: CURRENT_USER_QUERY });\n    // 2. Remove the item from the cart\n    const cartItemId = payload.data.removeFromCart.id;\n    data.me.cart = data.me.cart.filter(cartItem => cartItem.id !== cartItemId);\n    // 3. Write it back to the cache\n    cache.writeQuery({ query: CURRENT_USER_QUERY, data })\n  };\n  render() {\n    return (\n      <Mutation\n        mutation={REMOVE_FROM_CART_MUTATION}\n        variables={{ id: this.props.id }}\n        update={this.update}\n        optimisticResponse={{\n          __typename: 'Mutation',\n          removeFromCart: {\n            __typename: 'CartItem',\n            id: this.props.id,\n          }\n        }}\n      >\n        {(removeFromCart, { loading, error }) => (\n          <BigButton\n            title='Delete Item'\n            onClick={() => {\n              removeFromCart().catch(err => alert(err.message));\n            }}\n            disbled={loading}\n          >\n            &times;\n          </BigButton>\n        )}\n      </Mutation>\n    )\n  }\n}\n\nexport default RemoveFromCart;\nexport { REMOVE_FROM_CART_MUTATION };\n","import React from 'react';\nimport StripeCheckout from 'react-stripe-checkout';\nimport { Mutation } from 'react-apollo';\nimport Router from 'next/router';\nimport NProgress from 'nprogress';\nimport gql from 'graphql-tag';\nimport calcTotalPrice from '../lib/calcTotalPrice';\nimport User, { CURRENT_USER_QUERY } from './User';\n\nconst CREATE_ORDER_MUTATION = gql`\n  mutation createOrder($token: String!) {\n    createOrder(token: $token) {\n      id\n      charge\n      total\n      items {\n        id\n        title\n      }\n    }\n  }\n`;\n\nfunction totalItems(cart) {\n  return cart.reduce((tally, cartItem) => tally + cartItem.quantity, 0);\n};\n\nclass TakeMyMoney extends React.Component {\n  onToken = async (res, createOrder) => {\n    NProgress.start();\n\n    // Manually call the mutation once we have the Stripe token\n    const order = await createOrder({\n      variables: {\n        token: res.id,\n      },\n    }).catch(err => {\n      alert(err.message);\n    });\n    Router.push({\n      pathname: '/order',\n      query: { id: order.data.createOrder.id },\n    });\n  };\n  render() {\n    return(\n      <User>\n        {({ data: { me }, loading }) => {\n          if (loading) return null;\n          return (\n            <Mutation\n              mutation={CREATE_ORDER_MUTATION}\n              refetchQueries={[{ query: CURRENT_USER_QUERY }]}\n            >\n              {createOrder => (\n                <StripeCheckout\n                  amount={calcTotalPrice(me.cart)}\n                  name='Range Front'\n                  description={`Order of ${totalItems(me.cart)} items!`}\n                  image={me.cart.length && me.cart[0].item && me.cart[0].item.image}\n                  stripeKey='pk_test_TWkMSIUvATWhLhvIxi8UMBwB'\n                  currency='USD'\n                  email={me.email}\n                  token={res => this.onToken(res, createOrder)}\n                >\n                  {this.props.children}\n                </StripeCheckout>\n            )}\n            </Mutation>\n          );\n        }}\n      </User>\n    );\n  }\n}\n\nexport default TakeMyMoney;\nexport { CREATE_ORDER_MUTATION };\n","import { Query } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport PropTypes from 'prop-types';\n\nconst CURRENT_USER_QUERY = gql`\n  query {\n    me {\n      id\n      email\n      name\n      permissions\n      orders {\n        id\n      }\n      cart {\n        id\n        quantity\n        item {\n          id\n          price\n          image\n          title\n          description\n        }\n      }\n    }\n  }\n`;\n\nconst User = props => (\n  <Query {...props} query={CURRENT_USER_QUERY}>\n    {payload => props.children(payload)}\n  </Query>\n);\n\nUser.propTypes = {\n  children: PropTypes.func.isRequired,\n};\n\nexport default User;\nexport { CURRENT_USER_QUERY };\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAQA;AAAA;AAAA;AAAA;AAEA;AAAA;AAIA;AAAA;AACA;AAIA;;;;;;;;;;;;;;;;;;AAMA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAaA;;;;AA1CA;AACA;AADA;AAEA;AADA;AACA;AA2CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAaA;AACA;AAAA;AAAA;AACA;AACA;AADA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAKA;AACA;AADA;AADA;AAKA;AACA;AACA;AAXA;AAIA;AAOA;AACA;AACA;AAAA;AAAA;AAFA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;AAeA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAgBA;AAGA;;;;AA9CA;AACA;AAgDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5EA;AACA;AACA;AAEA;AACA;AAwBA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAFA;AACA;AAKA;AACA;AADA;AAIA;;;;;A","sourceRoot":""}